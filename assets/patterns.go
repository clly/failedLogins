// Code generated by go-bindata.
// sources:
// patterns/audit
// patterns/base
// patterns/firewall
// patterns/ha-proxy
// patterns/java
// patterns/linux-syslog
// patterns/nginx_access
// patterns/redis
// patterns/ruby
// patterns/secure
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _patternsAudit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x8f\xc1\x8a\x83\x30\x14\x45\xf7\x7e\x45\x36\xc2\xcc\x2f\x08\x2e\x1c\x22\x22\xcc\x28\x88\x32\x14\x04\x49\xf5\x61\x2d\x6a\xc4\x24\x94\x22\xf9\xf7\xe6\xa9\x1b\xd3\x6e\xba\xe8\x26\x90\x73\xde\x85\x7b\x83\x82\xc6\x39\x91\xf7\x09\x7c\x77\xf9\x4f\x33\xea\x31\xd5\x74\xb2\x42\xa2\xc9\x20\x5a\x7f\xfd\x97\x5f\xee\x92\x14\x7f\x3f\x61\xb6\x7b\x98\x78\x7d\xd1\x9e\x45\x6b\xae\x46\x09\xb3\x2e\xbf\x3d\xa2\x04\xcc\x64\xea\x1a\xdf\xba\x31\x48\x13\xf5\xcc\x15\x72\xf6\x42\xe0\x6b\x94\x50\xe7\xeb\xb1\x23\x12\xa8\xe5\x56\xd3\x5d\xa2\x2c\x0c\xe9\x89\x06\x79\xb0\xfb\x01\x84\x60\x2d\x68\x67\x1d\xf9\x9b\x46\x71\xf2\x91\xa5\x3d\x6f\xbb\xf1\xed\xa9\xbc\x6f\xac\xb9\x86\x54\x6c\x75\x23\xdc\x2c\x67\xc8\xee\x30\x27\x40\x1c\x63\x06\x6c\xa9\x83\xc1\x10\x1a\xe7\x11\x00\x00\xff\xff\x59\x19\xe7\xd3\xe6\x01\x00\x00")

func patternsAuditBytes() ([]byte, error) {
	return bindataRead(
		_patternsAudit,
		"patterns/audit",
	)
}

func patternsAudit() (*asset, error) {
	bytes, err := patternsAuditBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/audit", size: 486, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsBase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x77\xda\xb8\x12\xfe\xee\x5f\xa1\x26\x9b\x0d\x86\xf0\x9a\x97\xf6\x7a\xdb\x52\x17\x4c\x42\x0f\xd8\x14\x9b\x4d\x13\xdb\xe5\x38\xa0\x24\x3e\x4b\x30\x6b\x9b\xa4\xb9\xd8\xf7\xb7\xdf\x19\x49\x36\x24\x0d\xed\xfd\xb0\xb7\xed\x09\x68\xa4\x67\x46\xcf\x8c\xa4\x19\x89\x91\xa9\x0d\x75\xb5\xaf\x11\xdb\x2b\xff\x5b\x2d\x5f\xd6\xca\xff\xaa\x8c\xcb\x6e\x49\xc2\x01\xb2\xb7\xca\xc6\x53\xa9\xab\x5b\xa4\xd0\x54\xec\x52\xd9\x6d\xe2\x37\x20\xdd\x92\x2c\x4b\x1f\x55\x53\xab\xd7\xf4\x51\x9f\x14\x9e\x8e\x41\xc3\xa9\x08\x58\x53\x4e\xf2\xb6\x04\xd8\x8f\x60\x1c\xc6\xf7\x56\xb9\x76\x2a\x2c\x9d\x30\x4b\x35\xfb\xdb\x17\xb7\x89\x0a\x5e\xf9\x5a\x2d\x77\x50\x6d\x97\x8f\x77\x7a\x86\x6a\x11\xe7\xaa\xd0\x7c\xfb\x0a\x01\x30\x0a\x98\x8a\x2b\x6f\x90\xab\x7d\x93\xf1\x4b\x50\xe1\x88\x0d\x42\xa2\xa3\x88\xb4\x9e\x77\x82\x4b\xb2\x73\x25\x49\x03\xc3\x44\x8f\x71\x1e\xc5\xae\x03\x71\xc6\xbe\x88\x63\xba\xa1\xeb\xda\xe9\x7a\x94\xbb\x05\x03\xe7\xc6\xb0\x0d\x7d\xce\x43\x89\xa1\x2c\x73\xa0\xb6\x34\xe2\x98\x25\x49\xb4\xa2\xa2\xd4\x56\x2d\x95\x54\x8a\x4d\xe9\x74\xa8\x69\xed\x0b\x21\x4a\x9f\x47\x86\xa5\xb5\x4d\x6b\xd8\xd5\x4f\xc9\x4e\xc1\xfe\xba\xe3\x38\x6e\xb1\xe0\x00\x37\xde\x94\x8b\xf2\x4e\xe2\xec\xc3\x88\xb3\xbf\x1e\xe2\x6d\x18\x73\xf6\xa5\xd1\xa8\xdb\x26\x36\x77\x03\x29\xad\xde\xa4\x65\xa4\xb7\xd1\x73\x94\x96\xe5\xd5\x61\xba\xd9\x55\x6f\xa4\x92\xb4\x4b\x74\x1a\x3f\x04\xe1\x5f\xfe\xfc\x46\xea\xab\x2d\xbe\x36\xad\xae\xd9\x32\x40\x4a\x93\xbd\xd5\x79\x57\x6f\x1b\xe7\xa6\x90\xa0\xbb\x6f\xe8\x28\xc8\x52\x86\x22\x22\xe0\x4f\xa6\x73\x2a\xf2\xaa\x91\x3e\xed\x93\xa5\xb5\xb1\x17\x94\x1a\xc8\xf1\x38\x7d\xda\x05\xd3\x64\x53\xbe\xa8\xa2\xbc\xa4\xd2\x1d\xfc\x79\x42\x0a\x85\xc2\xc6\xea\xae\xea\x07\x47\x08\x7e\x9d\x7e\xd7\x9b\x28\x32\xec\x86\x97\xc0\x27\x69\x41\xf9\x0e\x5d\x28\x34\x8e\xa1\xf3\xd8\x4d\x1a\xf0\x75\xe4\x3a\xd3\xa4\xee\x4c\xe1\x93\x6d\x96\xa6\x33\x95\x0b\x4e\xe5\xa7\x18\x5c\x0d\x79\xfb\xcc\xc7\x29\xd0\xff\x6e\x6e\x19\x3e\x1b\xa8\xf6\x4b\x38\x1c\x6d\xe5\x80\x6a\x2f\x0d\x35\xff\x49\x62\x3f\x60\x76\xb8\x95\xd9\xd1\x16\x66\xab\x1a\x04\xee\x17\xb1\x6b\x6c\x65\x77\xbc\x9d\xdd\xe1\xaf\x62\x57\xdf\xca\xee\x64\x3b\xbb\xa3\xff\x07\x3b\x65\x1b\x91\xd7\xdb\x89\x1c\xff\xf3\x44\xe4\xc2\x5e\x05\xea\x14\x26\x8d\x23\x91\x62\x9e\x2a\xb3\x34\x9f\xd8\xb5\x3a\xaf\x4b\x5c\x6e\xca\x98\xe1\x60\x23\xfe\x8f\x68\x30\xcf\x73\x2b\xe6\x26\xcc\xa4\x38\x1d\xa4\xaa\x33\xc3\xb4\x58\x19\xce\x2b\x0a\xd4\x62\xa8\xc8\xee\xba\x59\x76\xc1\xf1\x13\x38\xf7\xac\x62\xfd\x14\x25\x43\x85\xa8\x34\x13\xe7\x8a\x1b\x87\x52\x9e\xcd\x01\xa5\x7c\x60\x0c\x59\x27\xa3\x92\xf7\x33\x3a\x82\x0c\x20\x50\x27\x43\xa6\x80\xe3\x15\x91\x55\x8b\x85\x17\xdf\x46\xd2\x40\xb5\xce\xb8\x89\x91\xde\xfd\x82\x92\xa8\x14\xac\x09\x05\x3b\xeb\x06\xd0\xfb\x2a\xfc\xd9\xce\xc3\x78\xef\xd5\x6f\x1f\x94\xca\x01\x5c\x31\x12\xa8\x60\x50\xb9\xe0\xaa\x91\xc3\xaa\x4f\x10\xcd\x6a\x13\x16\xd1\xc4\x55\xb1\xac\x0b\x9c\xa9\x3a\xa5\xf7\xd5\xc2\x22\x8e\x92\x38\x7e\x2c\xd8\x8b\xbf\x5d\x19\x21\x0f\x00\xa9\x3e\xb9\x94\xec\x0a\x16\x38\xb3\x2d\x82\x54\x52\x60\x46\x16\x3d\x07\x0a\xa7\xd3\x2c\xba\x38\x79\x0e\xcc\x60\x2f\xa2\xa4\xd1\xb0\x3b\x18\x1a\x96\x41\x72\x6b\x05\xa7\x24\xda\x25\xbc\xe0\x20\x42\x04\x3a\x0f\x1a\x58\xc9\xe3\xa6\x2c\x82\x30\x86\xdc\x08\xd1\x5b\x86\x3e\x06\x90\x4c\x82\x3b\x1a\x91\x59\x10\x44\x74\xf6\x48\xae\xc3\xe0\x8e\x0c\x3b\xad\xfa\xeb\xc3\x37\x07\xe4\x6a\x19\x93\xbb\x20\x8a\xb3\x81\x87\x5b\x2f\x26\x1d\x3f\xa4\xd7\xc1\x37\x30\x31\x0d\x68\x34\xdf\x8f\x49\xbc\x0c\xe7\xc4\x9f\xc7\x01\xd9\xfb\xf2\x85\x91\x14\x6b\x52\x15\xdc\x20\x20\xbf\x55\x4a\xaf\x8a\xfb\x05\x79\x95\x1e\xfc\x47\xf9\xe3\xdd\x87\xdd\xbd\xb1\x53\x66\x5e\xed\x32\x85\xa1\xda\x27\x4e\x93\x97\x54\xa1\xc2\xee\x4a\xef\xb0\xeb\xeb\xef\x80\x64\x97\xa9\xdf\x7f\x8c\x80\xff\x45\x1e\x85\xcc\xe2\x73\x06\x09\xa7\x00\xf3\xff\x5e\x7d\xa7\xfc\x31\x6e\x3a\x65\xc7\x76\x5c\xb7\x98\xf1\xe6\x8a\xb0\x9b\xb8\x98\xf2\xad\x25\x0c\xa6\xdc\xb8\x18\xc6\xa5\x48\x95\x6a\x95\x43\xe0\x8e\xca\x62\x6d\x7f\xfd\x80\x97\xba\x0f\x8c\x2f\x03\xb2\x65\x58\x8b\xf9\x2c\x68\x0d\xc2\xd8\x0f\xe6\xb0\x91\x15\xf2\xc9\x9b\x2f\xbd\xf0\xf1\x80\x74\xe8\xd5\x01\x39\x3c\x20\x35\xf8\xab\x37\x0e\x48\x9b\x4e\xe8\xdd\x15\x0d\x25\xb8\x7b\x40\x60\xd9\xe9\x04\x30\x7c\x22\x5e\x6e\x26\xa0\x00\x42\x28\xa4\xbe\x17\x82\x34\xb9\x85\xa6\xba\xc0\xa6\x3f\x63\xbd\x8f\xc9\xa7\x25\x2a\x51\x90\x3e\x2d\x67\xd0\x42\xb4\xba\xbc\x41\x43\x51\x0c\x6d\x93\x2e\xa0\x1d\xb3\xc9\x40\x34\x26\x31\x88\x01\x17\xf4\xe0\x1e\x75\xc5\x10\x50\x5a\x4b\x78\xeb\x64\xd4\xd8\xad\x19\x2e\xbe\x4d\x96\xda\x92\x3a\x9c\x84\x86\x2b\xf3\xb1\xb6\x7a\x21\x32\x5a\x8d\x8d\xb2\x4b\xaf\x5d\x6f\xf0\xa4\xc4\xa4\x43\xcc\x54\x32\xcf\x8b\x32\x46\xa6\xed\x3d\x42\x5c\x20\x3e\x53\x0f\xc2\x62\x2d\x29\x7c\xdc\x2e\x0f\x08\x8d\x27\x95\x4a\x45\x12\x26\x61\x1c\x3e\x01\x02\xbc\x00\x03\xed\x88\x0b\xe7\x74\x0a\xc2\x9c\x0a\x11\x54\x31\x4a\x42\xea\x84\x7e\xae\x65\x7a\xe8\xe8\x32\x14\xd2\x32\xb7\xc7\x58\x5c\x50\x2f\x8c\xe0\xc8\x5c\x68\x2a\xbe\x17\xde\x63\xf2\xe6\xb7\x1f\x69\x77\x22\xf1\xde\x8d\x3e\xc8\x5c\x23\xf6\xae\x80\x1c\x5c\x6f\x1c\x6e\xe6\x5f\x08\x45\x57\x1f\x59\x1a\xe1\x59\xe2\x58\xf8\x0e\x73\xec\x9f\xd4\xf6\x89\x1f\x11\x8f\xcc\xa8\xb7\x20\x11\x9d\x80\xd3\x70\xa6\xd8\xf1\x23\xb1\x7f\x47\x49\x14\x7b\x10\x87\x70\x0a\x20\x18\x8a\x6f\x97\x11\x2a\xdc\x7b\x33\x7f\x5a\x91\x4c\xad\x65\xe8\x6d\x92\x3f\x37\x84\xe9\xe4\xa4\xc6\x5e\x24\x90\xc9\xdc\xfc\x11\x24\xed\x5a\xdd\x3e\x72\x78\xf5\x96\xcf\x8f\xd9\x77\x34\xc4\xec\xca\xe9\x89\x94\xc1\x6d\x62\xaa\x7f\x95\xf1\x9c\x48\x5c\xd5\xfe\xca\x2b\xc9\xcf\x34\x33\x1c\x26\x0b\x2f\xa6\xe0\xc2\xdd\x02\x59\x5f\xc0\xbf\x6a\xbf\x5f\x6d\xb7\xcb\x67\x67\x4a\xbf\xaf\x98\x66\x65\x04\xff\x48\x21\x08\x49\x04\x19\x29\xbe\x85\x47\x00\x99\xf9\x7f\x51\xe2\xc7\x32\xbe\x57\xb4\xf1\xc8\x84\x73\x97\xed\xb3\xd4\xae\x96\x5d\x21\xc2\x3e\x10\x22\x2e\x46\xca\xd1\xda\x88\x6c\x0e\x57\xd6\x70\xa6\x5d\xd9\xc0\x77\x4d\xe3\xcd\x49\xad\x3e\x46\xdf\x2e\x0d\x9d\x2d\xcf\x65\x82\xcf\x38\xe1\x1f\x7a\xd5\xcc\x7d\x84\xcc\x9e\x69\xac\xc3\x9e\x3b\x8d\x21\x67\x51\x32\x2d\xb5\x3f\x18\x0b\x24\x11\x73\x95\x37\x38\x94\x37\xf9\x59\x24\x9b\x6c\x63\x26\x31\x6f\x16\x4e\x68\x3e\xa7\x9a\x36\x99\xb7\x60\x5e\x84\x08\x8b\x9f\xf0\x9f\x07\x82\xd1\x10\xe3\xa9\x5d\xc6\x69\x50\x39\x95\xac\x4b\xb6\x0d\x07\xfd\x96\xe6\xda\x66\xdb\xb5\x92\x91\xd5\x92\xd7\x3a\x63\x28\x03\x6f\x1a\x0d\xa6\x7a\x91\x66\xc1\x4c\x37\xa3\x9a\x79\x45\x84\x4d\xfc\xbe\xdc\x98\x76\x6c\x58\x67\xec\x01\xff\x23\x0b\x1b\x9a\x99\x3d\x3c\x75\xe6\x63\x34\x0b\x6e\x20\x05\xc0\xb6\x51\x78\x8e\xc4\x7c\x40\xb2\xfd\x22\x99\x17\x66\xcf\x38\xcd\x23\xbd\x36\x5f\x7a\xc1\xbe\x04\xc9\xfa\x94\xf9\xeb\x3c\x54\xc6\xd5\xbd\x32\xbe\xe5\xb9\x05\x36\x02\x05\x12\xbe\x94\x45\x18\xdc\x84\xde\x1d\x06\xde\xb1\xd7\x45\xd3\x9f\xa6\x0e\x14\x79\xa1\xf0\xbc\xc0\x8a\xee\x8e\xda\xea\xf6\xba\x70\x45\x78\xbb\xb7\xca\x1f\xe7\xca\xb5\x37\xf1\x67\x7e\xfc\x98\x56\x36\x7b\x17\xa1\x1f\x84\xd8\xfb\x5e\x3a\xb3\xac\x81\x58\xc2\x9c\x75\x35\xf3\xa5\x2a\x02\xa2\xac\xc3\x94\xdd\x7e\xcc\x5b\x28\xe5\x93\x65\x1c\x49\x9f\xf1\x5c\x6c\x3e\xdd\xd9\x78\x0f\x82\x77\x1d\x84\x77\x1e\x20\x38\x41\xfc\xe5\x02\x90\xcf\xe2\xa6\x60\x72\x61\x07\x33\x15\xfb\xf8\x89\x37\x29\xc1\x6d\xb7\x76\x5c\x81\x45\x89\x82\x65\x38\xa1\x69\x6e\x0b\x43\x97\x2a\xe2\x71\xac\x0e\xd4\xd6\x99\xd6\x63\x31\xcd\x42\xa4\x4c\x66\x3e\x9d\xc7\xfe\x22\x15\x3f\xe6\x28\xfe\x14\xe4\x5c\xf2\x96\xf1\x6d\x4a\x30\xe2\x59\x34\x36\x58\x39\x2e\xd9\x61\xc4\xf0\x87\x0d\xe5\x9e\x86\x57\xa8\x97\xfd\xb0\xa1\x84\xf4\xef\x25\x20\x71\xc9\x08\x6a\x43\xc8\xf8\x4f\x3b\xca\x6d\x1c\x2f\x00\x1e\xf9\xc1\x1c\xce\x0e\x3f\x17\xaa\x12\x7a\x0f\x99\x8a\xbc\x43\x72\x70\x48\xa3\x45\x30\x8f\xa8\x08\x82\xe8\xbd\x7a\x84\xdd\x97\x26\x65\xf6\xf2\xff\xd8\xd5\xb5\xf6\xa6\x7b\xcf\x1c\x46\x5a\x9f\x4d\xb0\x74\x4d\xc3\x90\x86\x42\xf4\x6e\xd0\xd3\x6c\x45\x7a\xf4\x9e\xce\x22\x09\xd0\x3d\xed\x4f\xad\xc7\x2e\x7c\x9e\x3b\xa3\x61\x9c\xa8\x3d\x6d\x68\x25\xb6\x95\xc4\x6e\xe8\x4d\x68\x62\x0d\xc1\xbd\xc4\x6e\x27\x53\x97\x5e\x2d\x6f\x92\xb6\xf6\x71\x74\x9a\xd8\x7a\x32\x77\x83\xd8\x07\x00\x84\xa0\x8b\x88\x6e\xe2\xbb\xf3\xeb\x20\xe9\xea\x1d\x23\xb1\xcf\x93\x07\xd7\x0b\xe7\x78\xdb\x80\x14\x8a\x55\x50\x1d\xea\x28\xc1\xc6\x00\xc9\xd6\x12\xea\x86\x21\x76\x04\x58\xc8\xb5\xe1\x10\xdb\xc6\x10\xc7\x5a\xc9\xc4\x85\x6d\xc9\x74\x27\x1e\xde\x1a\x5a\xc3\xae\xc5\x94\x5b\x6a\x0f\x11\x9d\xe4\xda\xf5\x62\x6f\x96\x74\x20\x96\xbd\xc4\x36\x93\xc8\x05\x97\x42\x9a\x98\xe0\xcf\x50\x4b\xb4\xbe\x36\x3c\x05\x05\x4d\x6f\x5d\xb0\xe9\xa8\x7b\x47\x43\xbc\x62\xd0\xf9\x84\x55\xd4\xff\x06\x00\x00\xff\xff\x48\x4e\x48\xe0\xed\x13\x00\x00")

func patternsBaseBytes() ([]byte, error) {
	return bindataRead(
		_patternsBase,
		"patterns/base",
	)
}

func patternsBase() (*asset, error) {
	bytes, err := patternsBaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/base", size: 5101, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsFirewall = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x6d\x73\xe2\x38\x12\xfe\x9e\x5f\xa1\xaa\xa9\x54\xc1\x4c\xd8\xe1\x25\x24\x3b\xdc\xb1\x53\x5c\x60\xb3\x54\xcd\x40\x16\x73\xb7\x97\x5b\xe6\x5c\x8e\x2d\x40\xb5\xc6\xf6\xca\x72\x32\x5c\xf0\x7f\xbf\xd6\x8b\x65\xcb\x18\x12\x6e\xf6\xf6\x4b\x70\xb7\x5a\xdd\xad\xa7\x5b\xad\x96\xf2\x06\x4d\x30\xb3\x5c\x8a\x71\x80\x96\x84\xe2\x27\xc7\xf7\x91\x1f\xae\xe2\xb3\xc9\x68\x6e\xdd\xcc\x46\xa3\x89\x35\xb2\xac\xf1\x74\xf2\x69\x7a\x8b\xce\x9f\xad\x7b\x0b\x3e\xe6\xe3\xcf\x23\x6b\x3e\xf8\x7c\xd7\xf3\x1c\x86\x53\xe0\x8f\xef\xa6\xb3\x9f\xa6\xd6\xbc\xe7\xe1\x47\xe2\x1a\xac\xb4\x57\xb0\x21\x87\x6d\xe2\xf5\xcf\x9f\x7f\x99\xce\x86\x3d\xcd\x48\xcf\x9f\x87\x83\xf9\x00\xa4\x63\xe6\x50\x66\x33\xb2\xc1\x20\xf4\xf3\xdf\xa7\xf3\xd1\xd0\x9a\xcf\xc6\x93\xdb\x5e\x3e\x92\x22\x2f\xa1\x0e\x23\x61\x00\x32\xe3\x09\xd8\x55\x64\x8a\xa2\xd0\x27\xee\x56\x9a\xe0\x23\x9a\x4e\x51\x8c\x29\xb7\xd6\x97\xa6\x7a\x8a\x84\x29\x34\x64\x61\x26\xce\xbf\x41\x94\xba\xe8\x3f\x61\x80\x33\x3f\x81\xb6\x39\x0d\x86\x63\x66\x8c\x00\xad\x46\x1c\x57\x39\x24\xf8\x92\xe2\x46\x03\xa6\x74\xf3\xcf\x14\x51\xf7\x31\xf3\x8d\x7f\x0a\x5b\xfd\x02\x84\xdc\x14\x89\x84\xa1\x22\x9b\xdb\xe1\x6c\x3e\x1c\x85\x54\xeb\x54\xa4\x90\x2f\x0e\x64\xa4\x98\xd1\xf8\xea\x43\xa4\x3c\x44\xa2\xb2\x25\x39\x20\x34\x97\xb4\xaa\x11\xad\xbc\x5a\x07\x37\x53\xad\xa3\x30\xa2\xfc\xc0\x71\x0c\x90\xe4\xa1\xc9\x19\x80\x0a\x76\x62\x01\xde\x2d\x24\xdd\xf0\x5e\x04\x48\xf2\xd2\xb3\xb3\x37\xfd\x3e\xba\x21\xb1\x1b\xa2\x81\x35\x40\xfd\xfe\xd9\xcd\xd8\xba\x99\xda\xf3\xc1\xed\xed\x68\x68\xcb\xa4\x44\xff\xfe\xeb\xf9\xf3\xdd\xd4\x12\x8a\xb7\x31\x24\xb1\x1d\x51\x92\xfe\x70\xfe\x2c\x84\xf3\x9c\xe5\xf9\x03\x99\xb4\x89\xd2\x9a\xce\x68\x09\x87\x98\xb5\x0e\x63\x96\xd6\x3f\xf6\xd0\x79\x36\x73\x70\xdb\x73\xb9\x71\xe6\xac\xd2\xde\x99\xa9\x0d\x34\x7c\x9e\x4e\xe6\x3f\xa5\xe8\x9d\xfa\x1a\x0e\xee\xd3\x1a\x9f\xfe\x7c\x3f\x1a\xcc\x40\x13\x7c\x71\xf1\xf4\x2c\xd3\x86\x7e\x1d\x34\xfe\xd5\x6c\x7c\xf8\xf2\xae\x21\x70\x48\x1b\x20\xaf\x78\xf6\x97\x77\xf5\xb3\x37\xe8\x26\xdc\x6c\xc2\x00\xdd\x41\xbe\x13\xd7\xc7\xb1\x5a\xf0\xe0\x66\x0e\x5b\x11\xfd\x2d\x21\x3e\xdb\xcd\xb1\x43\xbd\xf0\x29\xd8\x0d\x71\xb0\xe5\x7f\x08\xf6\x76\x9e\xfc\xa1\xf8\xf7\x04\x16\x09\x5f\x11\xa6\x1b\xc2\x98\x1e\x42\x0f\x5b\x34\xb8\xf9\xb4\xf3\x60\x45\x30\x1f\xf8\x20\xd7\x80\x6d\x1f\x3e\xc1\xf7\x90\x86\x51\x44\x82\xd5\x0e\xb6\xab\x23\x27\xf9\x18\x7e\x95\xfd\xd9\x68\x60\x81\xfd\x61\x12\xc1\x9e\x82\x71\x34\xbf\xb9\x43\xd6\xfd\x64\xf7\xa3\x43\x7c\xd0\xcd\x42\x28\x1e\x62\x00\xaf\x28\x04\x17\x91\x80\x61\xba\x74\x5c\xbc\x1b\x07\x8f\x8e\x4f\x40\x84\x3a\x41\xcc\xf3\x01\xea\x0d\xf6\xbd\xdd\x24\x44\x1b\x87\xb9\x6b\x30\x8a\xdc\x30\x08\xb0\xd8\x36\xbb\xe1\xc4\x42\x33\x0c\x82\x41\x8c\x05\xf1\x73\x82\xe9\x76\x07\x40\xc9\xed\x95\x2e\xe2\xb7\xf5\xb7\xca\xad\xe1\x78\x36\x92\xc8\x8c\x83\x87\x30\x09\xbc\x1d\x51\xbf\xd3\x84\xc9\x8f\x50\x7d\xa8\x19\x80\xfa\x68\xf6\x8f\xc1\x27\x5e\xf4\x60\x3f\xaf\x09\xdb\xa9\x50\xc4\x18\xbc\xf0\xa4\xe3\xe0\xb1\x92\xff\xe7\xa7\xc1\x7c\x64\xcf\xef\xef\x46\xbc\x3c\x41\x4c\x76\xde\x36\x70\x36\xc4\x85\x58\x41\x4a\x36\xda\x8d\x56\xf3\xaa\xd9\x6c\x49\xf1\x1f\x7f\x91\x14\x52\x19\x94\x3b\xd8\xf3\xa0\xc8\xaa\xc2\xa0\xea\x84\x28\x38\x6e\xe8\xa7\x85\xe5\xeb\x89\x32\xe0\xba\x96\x2c\x69\xb8\x11\xa5\x35\x2b\x12\xef\xcb\x45\x00\x22\x20\xc6\x55\xb5\x78\x5f\xae\x05\x4b\xdf\x59\xc5\xc8\xd8\x65\xcc\x8d\x6c\xc1\x4e\x11\x58\xd6\x11\x33\x85\x34\x3b\x35\x57\x7c\x75\x51\xa4\xae\x8b\x54\xab\x69\xa0\x71\x65\x4b\x11\x5b\x8e\x1d\x5a\xe2\x69\x90\x41\x3e\x70\x4c\x76\x00\x40\xfd\x28\x30\xb5\x45\x2d\xab\xfa\xc0\x5a\x3e\x25\x50\xfc\xd3\x45\x1d\x76\x27\xa8\x60\xe1\x0e\x10\xaa\x1f\x45\x2e\x57\xc0\x59\x25\x05\x25\xdc\x4a\x88\xed\xbc\x04\xcb\xc0\x14\x77\x51\x56\xdd\xea\x0a\xd0\x8e\x04\xed\xb2\x08\x5a\xeb\xf2\x8f\x81\x89\x9f\x66\x85\xe5\xe7\xae\xf5\x8a\x98\x1d\xc6\x88\x9f\x79\x85\xd5\x97\xe7\x2b\xc8\x0e\x43\xb4\xa8\xb1\x6d\xc4\x91\xe1\x90\x12\x77\x13\xd9\x9c\x4e\x2f\x20\xe5\x3d\x83\xcd\x69\x98\xa2\x20\xb9\x92\x90\x74\x0d\x48\xba\x87\x21\x29\xad\x5a\xbb\x93\xb7\x00\x8b\xfa\x1f\xb8\x87\xca\xbb\xe7\x94\xed\xd3\x12\x4b\x6b\x1b\x05\xa3\xdd\x7a\xf5\xd2\x28\x7e\xc4\x34\xc6\x28\x72\xd8\x1a\xb9\x6b\xec\xfe\xb6\xbf\xae\xf2\x3a\x4e\x71\xef\x52\xba\xd7\x31\xdc\xeb\xbc\xda\xbd\x57\xe6\x5b\x19\xf9\xfa\xc7\x6f\x4e\xc1\x72\xb0\x8a\x2a\x4b\x59\x59\x3b\x39\x2d\xc1\x0d\x38\x3d\x1d\xd7\x85\xa3\xad\xb1\xa2\x61\x12\xa1\xbd\x0c\x43\x8b\x5f\x15\x6f\xed\xc4\x6b\x3e\xb1\x05\x0a\x4b\xac\x76\xba\xf8\xa2\x90\xee\x72\xa4\x5b\xcd\x62\xad\x04\x2a\x33\xe2\x13\xb1\x6c\x09\x6f\x6e\xe3\xb5\x71\xa8\x8c\xc1\xfb\x62\x0c\x38\x38\x46\x0c\x16\xf5\xc3\x31\x68\xfc\x50\x1d\x82\xf7\xc5\x10\x64\x1a\x75\x08\x8e\x69\x84\x83\xb7\xe1\x06\x4c\x61\x0d\x14\x40\x9d\xf0\x26\x39\x5b\x61\x76\x50\xf7\xb2\x03\xf9\x64\x80\xa1\x88\x00\xa0\xcd\xb6\x06\x58\x50\x07\x8a\x31\x5a\x86\x74\x1f\x46\xb5\xb5\x5e\xca\xe7\x53\x0b\x89\x76\xb0\xd3\x6c\x17\x4e\x4b\x49\x29\x48\xf2\x9e\x20\x43\x86\x04\x08\xf0\xbb\x38\x30\x6e\x6f\x9c\xaf\x29\xda\x40\x0f\xcb\xa5\x3c\xd3\x44\xe7\xa2\x48\x5d\x1a\x54\xd7\xa0\xae\x0c\x67\x3a\xb6\x9c\x20\x7f\xba\xf2\xe7\xea\x40\x16\xca\xde\xf7\xf0\xe9\x24\x1a\xe2\x63\x9d\x4f\x69\x59\x3c\xdf\x65\x54\x4e\xc5\xbf\x26\x4e\x00\x35\xbe\x71\xa2\x48\xde\x51\x0a\x62\x8a\xa9\xd2\xf4\x58\xf9\x11\xa1\x7c\xa9\xfa\xec\xf5\x0c\x99\x03\x9c\xb3\xe7\x40\x81\x59\xe1\xc0\x5e\xb1\xca\x6e\xb8\xea\x3a\x51\xb8\xf1\x3e\x6c\x19\x8e\x15\x70\xe2\x9b\x57\xbd\x42\x14\x4a\xfd\xc6\xc7\x5a\x7e\x32\x6a\xfd\x46\xa2\xb4\x9b\xc5\x64\xc8\x0f\x29\x39\x66\x4b\xe6\xff\x27\xfc\x3c\xd2\x4b\xc7\xf3\x68\xd5\xce\x11\xb5\x38\xc6\xbf\xdb\x41\xb2\xe1\x86\xf4\x32\x8a\x91\x5a\xe5\xb3\xcd\xfb\xed\xfb\x52\x41\x57\x43\x29\xf2\xcd\x19\x15\xa2\xe9\x0b\x90\x75\x9b\xad\x02\x48\x9c\x7a\xa9\x6f\xcb\x2f\x14\x3d\xe1\x86\x3c\x79\xf6\xa1\x11\xd7\x25\x5f\x06\xfe\x95\x65\xe8\xa4\x63\x35\xcf\xeb\x22\x58\x15\x8a\x0d\x1c\xcb\x13\x8a\xe5\xac\xd3\xe8\xb4\x3a\x70\xf9\xb9\x28\x52\x97\x06\xf5\xbd\xc6\x4a\x48\xda\x52\x44\xfe\x7c\xff\xea\xc3\x8d\x23\xd6\xaf\x3e\xbb\xfb\xe5\xf8\x55\x74\x47\xc7\x7b\xf6\x5a\xb9\x78\xeb\x78\x5f\xca\x35\x74\x8d\x35\x74\x4f\x3a\x4f\x30\xa5\xc0\xde\xc0\x01\xef\xac\x70\x2f\x1b\x07\xae\x5d\xd9\x42\xf1\x81\xaa\x78\x6b\x7e\xb1\xf5\xce\x98\x07\x7a\x27\x3e\x5c\x55\xc1\x34\xbf\xac\xeb\x68\x2b\xcf\x05\x0e\xf4\x4d\x7a\x48\xf5\x4e\x48\x54\xae\x12\xca\x79\x04\x16\xdf\x21\x34\xa5\x64\x45\x02\xc7\x47\xe3\x3b\x68\x6c\xb7\x7e\xe8\x78\xbd\x43\xbd\x25\xb8\x1c\x82\xb8\x6d\x6e\x58\xcd\x2a\x5d\xd9\x34\x7f\x1f\x95\x4c\x91\x59\x69\x34\xab\x4a\x51\x09\x12\x9d\x17\x97\x50\x15\x5b\xd7\x59\x5e\x48\x6a\xcf\xff\x1e\x9a\x61\x17\x93\x47\xec\x21\x07\x05\x61\xd0\x18\xdf\x59\xd8\x85\xf5\xba\xbf\x61\x06\xe8\x66\x82\xfd\x6c\xa6\x30\xa9\xa7\x57\x5d\x60\xca\xa9\x6a\x3a\xf4\xc1\x70\xe8\xc3\x51\x87\x82\x6a\xa3\xb9\x77\xd6\xdd\xb8\xaf\x0b\x46\x44\x20\xe4\x31\x7f\x69\x0a\x60\x0b\x41\x4d\x7e\xc0\x34\x1f\x55\x65\xba\xd2\xe1\x45\x8d\xa3\xa7\x65\x15\x94\x7b\x17\x16\xb6\x76\x18\x9c\x06\xe2\x69\xc9\x09\x18\x69\x50\x1c\xf9\xce\x56\x5e\x78\x48\xb0\xca\x17\xda\xfa\x50\x78\x7c\x91\xd4\xab\xeb\x88\x5a\xdc\x37\x35\x79\xa7\x76\x06\x17\xea\xbd\xb3\x87\x2a\x1f\x3c\x8d\x75\xb5\x8d\x75\x1d\xee\x5c\xff\x4c\xff\xd1\x13\x81\x8b\xa7\x47\x96\x4b\x4c\x31\xf4\xef\x24\x20\x8c\xc0\xce\x2d\x65\x83\x5e\x48\x17\x7a\xee\xa6\x7e\xda\x90\xd4\xb1\x92\xa9\x77\x41\x39\x5a\x17\xdf\x7e\x7f\xd7\xe7\x36\xbf\xd2\x36\x75\x4f\x2c\x28\xed\xa2\x1c\xb3\x25\xb3\x62\xcf\x0c\x82\x97\x9e\x60\x8a\x2f\x6c\x09\xf4\x37\xbe\x3a\xe2\xad\x41\xc5\x3e\x82\xe4\x7f\xc0\xec\x89\xff\x8b\xc4\xd8\x28\x4e\xe0\x99\x5b\xe2\xc0\xce\x81\x7b\x0f\x28\xc0\x87\x1e\x0e\xd5\x92\xaf\x1b\xd7\xfc\xf2\xa3\x8e\x66\x45\xb5\x0d\xaa\x63\x50\x5d\x83\xd2\x97\x02\xa9\xc5\x96\xd3\xe5\x4f\x47\xfe\x74\xe5\xcf\x55\xe5\x4b\x9d\x7a\x94\xde\xc9\xbb\x6d\xfd\x1b\x1f\x39\x4f\x4d\x59\x1d\xf6\xeb\x56\xa7\x75\xdd\xce\xd7\xc2\x29\x74\x2b\x6e\xf3\x7d\x33\x6e\xe2\x8a\x0f\x29\x07\xe7\x51\xdf\xf0\x08\x60\x49\x58\xb8\xe1\x0f\xc1\x68\x32\x98\xa3\x21\x66\xaa\x7f\xb5\x98\xc3\x92\xb8\xb7\x88\xdf\xcd\xf0\x26\xe4\x0f\xe1\x81\xb7\x88\xdf\x66\x27\x5f\x6c\x53\xc1\xb6\x03\x87\xbf\xc9\xf3\x57\xec\x07\xbc\x26\x01\x3f\x0c\xb8\x22\xf9\xef\x30\x98\x3d\x5f\x93\x18\x7e\xca\xb3\xf9\xeb\xba\x7f\x7c\xb2\xde\x73\xd7\x9d\x4e\xe1\x5d\x41\x52\x70\x79\xce\xf5\x79\x34\x54\x27\x37\xf0\x16\x5f\x10\xa7\x51\x71\x8c\xf2\xc6\x94\xdf\xbf\xf0\x57\x17\x63\x0f\x7b\xdf\xa1\x9b\x84\x8a\x0d\xff\x90\xf0\x77\x73\x2e\x80\x48\x76\xf7\xc8\xe7\xb8\x52\xca\x16\x52\x50\x61\x31\x45\xf2\x5d\xfd\x02\xc1\xfd\x94\xf7\xfb\x4b\xb2\x4a\x28\x94\xf5\x43\x1a\x40\x4c\xcd\xfe\x8b\xb6\xe9\x3c\x62\x0a\x0d\xd3\x8b\x56\x9d\xc7\xd5\xff\x6c\x93\xcf\xe5\x16\x37\x09\x6f\xba\x1f\xf9\xbb\x2d\x83\xba\x26\xee\xd6\xa5\x39\x62\x44\xdd\xca\xc5\x7f\xa8\x46\x10\x09\xe3\xbf\x54\xff\x0d\x00\x00\xff\xff\x67\x39\xa9\x2f\x5e\x1d\x00\x00")

func patternsFirewallBytes() ([]byte, error) {
	return bindataRead(
		_patternsFirewall,
		"patterns/firewall",
	)
}

func patternsFirewall() (*asset, error) {
	bytes, err := patternsFirewallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/firewall", size: 7518, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsHaProxy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x56\x5f\x6f\xe2\x46\x10\x7f\xcf\xa7\xd8\x36\x8a\x0e\x2a\x01\x49\x7b\xf7\x50\xeb\x54\xce\x17\xdc\x03\x29\x60\x6a\x1b\xf5\xa2\x24\x45\x8b\x3d\x06\x2b\xc6\xeb\xee\xae\x8f\x20\xce\xdf\xbd\xb3\x6b\xd6\x40\x0f\x68\xfa\x56\xa9\x0f\x96\xec\x9d\xdf\xfc\xfd\xcd\xcc\xfa\xf2\x92\x04\x0b\x10\x40\x72\x2a\x25\xf0\x4c\x90\x15\x70\x20\x12\x84\x84\x88\xac\x3a\x64\x41\x73\xce\x5e\xd6\xad\x9b\xf6\xdb\xf6\xcd\xbb\x8b\x0b\x54\xe8\xb1\xb0\x58\x42\x26\xa9\x4c\x58\x46\x58\x4c\xe4\x02\x0c\x8e\xa4\x6c\x4e\x62\xc6\x97\x54\x0a\x12\xd2\x8c\xcc\x00\x3f\x8b\x2c\x22\x54\x6a\x5c\xcc\xd2\x94\xad\x92\x6c\x4e\xd2\x24\x7b\x16\x96\x32\xb8\x90\x32\xb7\x3a\x9d\x90\x45\xd0\x9e\x33\x36\x4f\xa1\x1d\xb2\x65\x27\xef\x18\xe7\x11\x0b\x45\x67\x95\x3c\x27\x9d\x7e\x10\x8c\xef\xd8\xfc\x57\xed\xe1\x5f\xea\x06\xb7\x7b\xaa\x17\x7d\x7b\xec\xb9\x9f\xef\x83\xc1\xd0\x21\x8d\xee\x77\xef\x1f\xae\x5b\x3f\x3f\x35\xaf\x36\x7d\x77\xe2\x59\x5b\xe5\xe9\x82\x15\xbc\xb4\xae\x36\xc3\xc1\x68\x12\x38\xf5\xf1\x32\xc9\x0a\x09\x65\xa3\x6b\xa1\xcc\x77\x6e\xdd\x51\xaf\x96\x09\x08\x59\x16\x95\x4d\xb4\x59\x99\x34\x9e\x7a\x76\xe0\x10\x34\xe5\x8e\x82\x7e\xcf\xbe\xdf\x19\x63\x99\x5c\x44\x74\x5d\x76\xb6\xc2\x43\x89\x3a\xbe\x77\xec\x5d\x4c\x6b\xa0\x3a\xa6\xbd\x04\x6a\x99\x4c\x96\x50\xb6\xaf\x36\x83\x51\xb0\x17\x6c\x9a\x26\x55\x54\xa2\x44\x02\x89\xfb\x05\x38\x4f\x22\x50\x7c\x20\xf3\x11\xc4\xb4\x48\xe5\xae\x03\x24\xc3\x77\x8e\x12\x56\x48\xb2\x5a\x20\x71\x89\xe2\x32\x97\x05\xc7\x9e\x48\x32\xb2\xc6\xaa\x18\xc2\xdb\x61\x3c\x37\x19\xde\xda\xe3\x60\xe2\x39\x3d\xcf\xf9\x6d\xe2\xf8\x41\xdf\xb1\x7b\x8e\xe7\x63\xce\x98\xba\x6d\x19\x0b\x53\x0e\x7f\x16\xd8\x5f\xd3\x05\xd0\x08\x38\xc6\xf4\x8d\xba\x3f\x76\x47\xbe\x73\x5a\x5f\xe4\x2c\x13\xb0\x33\x80\x49\x39\x2f\x74\x99\xa7\x80\xfd\x44\xb6\x1d\x6d\x3a\x12\x13\x8f\x13\xdd\x6e\x80\xdd\x8d\xc5\x20\x34\x8a\x48\x44\x25\x55\x99\xaa\x9e\xc4\x9e\xc5\xac\x55\xa2\x14\x7b\xdf\xf8\x51\x96\x66\x6b\x0d\xa8\x4b\x33\x03\x6c\xde\x36\x19\xa7\x34\xd4\xe5\x5b\xd6\xe5\x08\x0b\x21\xd9\x72\x87\x8c\x12\x0e\xa1\x64\x1c\x0d\x30\x65\x89\xed\x15\xdd\x94\x5c\xb4\x2f\x2e\x95\x6c\xeb\x91\x6c\x0b\x43\xaa\xbc\x48\x9f\xe1\x7b\x0a\x19\x79\x7b\x7d\x06\xf5\xb9\x85\x1d\xbd\xa2\x3c\x82\x48\xbd\x69\x85\x77\xe7\x14\xec\x30\x84\x5c\xb6\xee\x68\x36\x2f\xe8\x1c\xfe\x59\xc1\x83\x18\x77\x42\x65\xf9\xc7\xeb\x73\xc8\x89\x00\xde\xb2\xe7\xb8\x1b\x76\xe0\x43\x78\xc5\x9c\xc1\xdf\x62\x83\x23\xb8\x15\xac\xf3\x2a\x8e\x9f\xae\x5f\x03\x77\x32\x1c\x77\xbd\x42\x50\xe5\xe6\xbc\x0a\x0d\x17\xd0\x52\x8a\x9c\xa5\xc7\x33\x38\x54\xb8\xa3\x42\xb6\x86\x68\x3e\x4e\xb0\xd9\xf7\xb3\x78\x55\x93\x1f\xf6\x36\xee\x0f\x21\xcb\xc7\xaf\xc7\x85\x2f\xd3\xd8\x30\xa7\xde\x4e\xe2\xa8\x26\x6c\x9a\x6e\x09\x3b\x89\xe3\x15\x4f\x27\xe5\x85\x50\xc6\x14\x3b\xe5\xb1\x74\x8e\x0e\xdd\xdf\x66\x6d\x1a\x56\x14\x4c\x25\x32\xb6\xef\xe8\x38\x0a\xb6\x44\x9d\x41\x2a\x7e\x34\x1e\xf9\x39\x0d\x4b\x91\x15\x5c\x87\x15\x2b\x7a\xde\xab\x0d\x45\xeb\x29\x7f\xa3\x2e\x02\x1c\xe4\x37\x7a\xd0\xcd\x4a\x51\xd7\x05\xa6\xe2\xdf\xfb\x77\xee\x27\xb5\x29\xfd\xc0\x1e\x8e\x2d\xb1\x16\x08\xd5\xdb\x52\x48\xdc\x1b\x25\x62\x06\x63\xd7\xeb\xbb\x7e\x60\x84\x58\x2c\x1c\xd9\xb2\xd6\x46\x7b\x9f\x4a\x4b\x03\xad\x30\x4d\x54\x7a\x49\xae\xf6\xb0\xda\xb5\xdb\x83\x9c\x71\x59\x92\xc7\x87\x7a\x39\xab\x9d\x6f\x6d\xf9\xc3\x8d\x83\x25\x7b\x42\x0b\x23\x37\xf0\xc7\xf6\xad\x63\xc5\x5c\x17\x2a\x9a\x66\x14\xf7\xf6\xbe\x64\x46\xc3\xe7\x5a\xd0\xd9\x13\x54\x61\xd5\x0a\xca\xb9\x4a\xc3\x2c\x55\x85\xad\xcf\xf0\xa4\x80\x83\x13\x63\x16\x0b\x9e\xe1\x7a\x3a\x2a\x33\xb5\x3f\x70\xab\x11\x51\xc1\xf5\x9d\x6f\x1c\xab\x92\x4f\xb1\x80\xb2\x10\x53\x75\x01\x1f\x66\xb0\xc6\x9f\x08\x34\x46\xa3\xf2\xe4\x0d\x10\x32\xf6\x9c\xc0\x31\xf9\x96\xfe\x1d\x60\x17\x09\x70\xbc\x7e\x75\x1c\xda\x77\x5d\x06\x1a\x4a\x95\x96\xc9\x29\x86\xfd\xaf\xd9\xc1\x97\xe0\x5f\xcc\x67\x6d\x97\x83\xe4\x09\x08\x63\x0d\x21\x87\xf5\x33\xe5\xa9\x0e\x49\xe3\x71\x53\xb3\x7c\x7c\x25\x94\x8f\x65\xb3\xdb\x20\xf8\x1c\x85\x1e\x8c\x5b\x8d\xfd\xbe\xf1\xfe\xa3\xad\x0c\xfd\xf2\xb5\x71\xb5\xf9\xdd\xf5\x7a\x55\x95\x91\xf3\x19\x3a\xbd\xda\x4c\xbc\x01\x1a\x0a\xdc\xea\x18\x7b\x5f\xb2\x12\xff\x7f\x50\xbb\x8b\xbd\x38\xf1\x1d\xaf\x92\xa8\x61\xd7\x3f\x28\x0f\x7f\x7c\x78\xfa\xa1\xd9\xfd\x60\x10\xde\x40\x77\xb9\x06\xe9\xf5\xb4\x13\x8c\xed\xa0\x3f\xb6\x3d\x7b\x58\x49\x4d\x4b\xa9\xc8\xd4\x20\xa9\x6a\x4d\x86\x1f\x8d\x07\x0c\x49\xa8\x66\x68\x76\x9b\x18\xf7\xd1\x99\x94\xe1\xb7\x23\x89\x7f\x61\xff\x8f\x89\x7c\xd5\xf4\x9d\x1e\xb0\x13\x83\xf4\x1f\x9b\x83\x8b\xbf\x02\x00\x00\xff\xff\xdf\x7b\x53\xb6\x41\x0c\x00\x00")

func patternsHaProxyBytes() ([]byte, error) {
	return bindataRead(
		_patternsHaProxy,
		"patterns/ha-proxy",
	)
}

func patternsHaProxy() (*asset, error) {
	bytes, err := patternsHaProxyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/ha-proxy", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsJava = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x72\x0c\x73\x74\xf6\x71\x0c\x0e\x56\xd0\xb0\xb7\x8a\x4e\xd4\xad\xd2\x8d\xd5\x8e\xd1\xd3\x8c\x76\xd4\x8d\x02\x72\x0c\x74\x2d\x63\xb5\xb9\x40\x6a\xdc\x3c\x7d\x5c\xc1\x4a\xe0\x12\xf1\x7a\xba\xb1\xb5\x9a\x60\xc9\xe0\x10\x47\x67\xef\x90\x20\x47\x67\xd7\x00\xc7\xa0\x10\x05\xa5\xc4\x12\x05\xd5\x6a\xb8\xc9\x56\xc9\x39\x89\xc5\xc5\xb5\x31\x7a\xaa\xd5\xe1\xfe\x41\x2e\x56\xb9\xa9\x25\x19\xf9\x29\xb5\x31\x1a\x10\x35\x20\x93\xad\xd2\x32\x73\x52\x6b\xad\x54\xab\xfd\x42\x7d\x9d\x5c\x83\xac\x72\x32\xf3\x52\x6b\x63\x34\xb9\x00\x01\x00\x00\xff\xff\xc5\x5e\x71\x7a\x9e\x00\x00\x00")

func patternsJavaBytes() ([]byte, error) {
	return bindataRead(
		_patternsJava,
		"patterns/java",
	)
}

func patternsJava() (*asset, error) {
	bytes, err := patternsJavaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/java", size: 158, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsLinuxSyslog = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xff\x8b\xda\x30\x1c\xfd\xbd\x7f\xc5\x07\x46\xc1\x72\x78\x6e\x72\x1b\x47\xd8\x26\x9d\xe6\x5c\x41\x5b\x69\x3a\x86\xbb\x8e\xd2\xab\xd1\x2b\x58\x53\x9a\x38\x91\x9a\xff\x7d\x49\xad\x5e\xba\x2f\xf7\x5b\xfb\xde\xcb\xcb\x7b\x9f\x7c\xc8\x92\xcc\x82\xe9\x17\x97\xe0\x21\xf4\x46\xc8\xae\xcf\x40\xe4\xcd\x31\x89\xdc\xf9\x02\x89\xbc\xa0\x5c\xa4\x45\x29\x4f\x76\x7d\x85\x13\x8f\x04\xf7\x1f\xde\xbe\x7b\xa1\xf5\x9f\x74\x4c\x8f\x07\x77\xec\xcd\xbc\x68\x29\xc1\x19\x5d\xb0\xaf\x01\x89\xd0\x96\x6d\x38\xdb\x57\x19\x95\x70\xc1\x17\x61\x30\x95\xc8\x6a\x7f\xdc\x39\xc1\x84\x78\x81\x7f\xe5\x75\x40\xa9\xcc\x3f\xd9\xf5\x34\xc4\x78\xb2\x9c\xb8\x91\x8b\xd4\xd5\x3c\xdd\x50\xe9\xd8\xf5\xf7\x20\x9c\xa0\x32\x2d\x92\x82\xad\xf6\x5b\x2a\xe3\x9e\x5d\x37\x1a\x8d\x65\xe9\x76\x4b\x2b\x19\x3b\x08\xb8\x3a\x92\xb3\x1d\x18\x27\x5a\x28\x51\x35\x84\x8a\xb4\x66\x15\xec\x39\xad\x94\xe4\x1b\xc1\xa1\xef\xce\x31\xd2\xff\xbb\xb4\xa0\x52\xd5\x83\xa7\x23\x74\x52\x68\x8f\xa7\xa3\x74\x46\x96\x35\x0e\x03\x3f\x71\xc7\x91\x8e\xfe\xe8\xf6\x7f\xc0\xcf\x9b\x06\x53\x0d\xfe\xa8\xa2\xf3\x69\xfb\xc6\x5a\x25\x53\xb4\x71\x18\xa5\x99\x50\x91\xce\xb2\x4e\xd5\xd8\xb1\xda\x29\xcd\x3c\x1f\x77\x4c\x87\x12\xfe\x39\x1d\xcb\x7a\x03\x1e\x8e\x1e\xe0\xfd\xdd\xf0\x0e\xf8\x91\xab\xf9\xf7\xee\x1d\x5d\xb4\x48\x05\xf4\x38\xa5\xf0\x2c\x44\x89\x06\x83\xc3\xe1\x70\x5b\xad\xb3\x3e\x5d\xe5\x82\x55\xb7\xac\xda\x0c\xf2\xdd\x9a\x0d\x14\xa6\x0f\x3b\xed\xd5\xfa\x7b\x11\x7a\xf0\xd1\xae\xfd\xc0\xf7\xf1\xd4\xf3\x23\x74\x36\xd6\x54\x52\x56\xb9\xfc\x6c\x68\xc9\x04\xe2\xc7\x73\x11\x19\xab\x91\xbc\x30\x3a\xf7\xb5\x44\x6b\x2b\xff\xe3\xfa\x4b\x0d\x0a\x6e\x9a\x05\xfb\x7b\x0f\x0d\x9d\xe0\xf2\xd4\x77\x5a\xa5\x5e\xb8\xe6\x09\x0d\xc1\x33\xe3\xc2\x90\x34\x8b\x60\xd0\x69\x59\xbe\xc2\x96\x15\xcb\x5e\xa1\x0b\xbe\xc9\x57\x06\x6f\x0e\xc1\xd4\x71\x2d\x3a\x5d\x1f\x53\x63\x9d\x07\xbd\x0c\x47\x35\xee\x3c\x6a\xf7\x2a\x69\xfd\x0e\x00\x00\xff\xff\x44\xcb\x98\x9b\xc0\x03\x00\x00")

func patternsLinuxSyslogBytes() ([]byte, error) {
	return bindataRead(
		_patternsLinuxSyslog,
		"patterns/linux-syslog",
	)
}

func patternsLinuxSyslog() (*asset, error) {
	bytes, err := patternsLinuxSyslogBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/linux-syslog", size: 960, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsNginx_access = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\x5b\x4f\x83\x30\x14\xc7\xdf\xf7\x29\x1a\x12\x12\x97\x05\x2f\xaf\x7d\xd1\x6e\x23\xc2\x03\x17\x29\x44\xe3\xba\x2c\x9d\x74\x42\xe2\x00\xdb\xe2\x8d\xf5\xbb\x7b\x40\xc7\xf6\xd6\xf3\xfb\xff\xce\x05\xc2\xfb\x8c\xba\x49\x48\x02\x17\xad\xb8\xf3\x43\x9c\x67\x76\xc9\xee\x98\xc3\x66\x1b\x7b\x3d\x9b\xfc\xc5\xc8\xee\x4e\x9e\x01\xe8\x87\x4f\x64\xb1\x70\x29\x85\xc4\x8f\xa3\xc4\x8b\x68\x8a\x5f\xde\x4a\x51\xe9\xb2\x31\xa3\x8e\xcb\x1c\xc8\x59\xcd\x5b\x5d\x18\xc4\x56\x76\xe7\xa5\x69\xbc\x24\xa9\x8b\x75\xb9\x17\x4a\xf3\x7d\x63\xd8\x1a\x59\x76\xf7\x18\x25\x4b\xfc\x21\xe4\xb6\x6f\xcb\x12\x3f\x26\xa9\x17\x93\x84\x04\x58\x8a\xf7\x16\x54\x83\xfa\xde\x2b\x98\x99\x05\x73\x98\x59\x68\xdd\x80\xaf\xca\xba\x32\x16\x1a\xb1\x14\xaa\xa9\x2b\x25\x0c\x42\x17\xb7\x78\xc4\xdb\x6f\x2d\x94\x39\x38\xd3\x9e\x5a\x43\x02\x4b\xc0\xde\x09\x29\x85\xec\x13\xeb\x60\x77\x0f\xf4\x84\xa6\x68\xa8\xf9\xeb\xff\xb7\xc0\xfb\x6b\x57\xcb\x4f\x2e\x73\x91\xc3\xc3\x9c\xff\x84\xa2\x56\x83\x34\x27\xd4\xbd\xb9\x86\xa5\xc7\xb3\x37\x79\x2b\xb9\xee\x8f\x9c\xfc\x06\x00\x00\xff\xff\x9b\xbf\xf8\xe2\x74\x01\x00\x00")

func patternsNginx_accessBytes() ([]byte, error) {
	return bindataRead(
		_patternsNginx_access,
		"patterns/nginx_access",
	)
}

func patternsNginx_access() (*asset, error) {
	bytes, err := patternsNginx_accessBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/nginx_access", size: 372, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsRedis = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x72\x75\xf1\x0c\x0e\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x50\x50\xad\xf6\xf5\xf7\x0b\xf1\x70\x71\x8c\xac\x85\xb1\x41\x0c\x90\x82\x5a\x2e\xb0\x5a\x1f\x7f\x77\x85\x98\x68\xd5\xea\x00\xff\x60\x4f\xbf\x10\xab\x82\xcc\x94\xda\x98\x58\xa0\x12\x54\x83\xac\x4a\x32\x73\x53\x8b\x4b\x12\x73\x0b\x6a\x15\x62\xb4\xb8\x00\x01\x00\x00\xff\xff\x75\xdf\x12\xf4\x66\x00\x00\x00")

func patternsRedisBytes() ([]byte, error) {
	return bindataRead(
		_patternsRedis,
		"patterns/redis",
	)
}

func patternsRedis() (*asset, error) {
	bytes, err := patternsRedisBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/redis", size: 102, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsRuby = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x0a\x75\x8a\x8c\xf7\xf1\x77\xf7\x71\x0d\x73\xf5\x51\xd0\xb0\xb7\x72\x71\x75\x0a\x75\xaf\x71\x73\x0c\x71\xf4\xa9\x71\x0d\x0a\xf2\x0f\xaa\x09\x77\x0c\xf2\xab\xf1\xf4\x73\xf3\xd7\xe4\x82\xa9\x76\x77\x0d\x52\x88\x76\x71\x73\x0d\xf7\x8c\xd5\x51\x88\x89\x56\xad\x0e\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x88\xf7\x0c\xf6\xb7\x30\x33\x30\xac\x55\x50\xae\x0e\xf0\x0f\xf6\xf4\x0b\xb1\x2a\xc8\x4c\xa9\x8d\x89\x55\xd0\x52\xad\x46\xb1\xac\x56\x41\x57\x57\xc1\x4a\x41\xb5\xda\x05\x68\x97\x55\x6e\x6a\x71\x71\x62\x7a\x6a\x2d\x17\x20\x00\x00\xff\xff\x07\xad\xc3\x68\x91\x00\x00\x00")

func patternsRubyBytes() ([]byte, error) {
	return bindataRead(
		_patternsRuby,
		"patterns/ruby",
	)
}

func patternsRuby() (*asset, error) {
	bytes, err := patternsRubyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/ruby", size: 145, mode: os.FileMode(420), modTime: time.Unix(1454819725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _patternsSecure = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x0c\x88\x77\x0b\xf2\xf7\x8d\x0f\x76\x75\x0e\x0d\x72\x55\x70\x4b\xcc\xcc\x49\x4d\x51\x50\xad\x76\x0f\x72\x75\x75\x89\x74\x71\x0c\x71\xac\x05\xf2\x3c\x03\xac\x32\x0b\x6a\xb9\x00\x01\x00\x00\xff\xff\x99\x6d\x48\xbd\x2d\x00\x00\x00")

func patternsSecureBytes() ([]byte, error) {
	return bindataRead(
		_patternsSecure,
		"patterns/secure",
	)
}

func patternsSecure() (*asset, error) {
	bytes, err := patternsSecureBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "patterns/secure", size: 45, mode: os.FileMode(420), modTime: time.Unix(1454819957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"patterns/audit": patternsAudit,
	"patterns/base": patternsBase,
	"patterns/firewall": patternsFirewall,
	"patterns/ha-proxy": patternsHaProxy,
	"patterns/java": patternsJava,
	"patterns/linux-syslog": patternsLinuxSyslog,
	"patterns/nginx_access": patternsNginx_access,
	"patterns/redis": patternsRedis,
	"patterns/ruby": patternsRuby,
	"patterns/secure": patternsSecure,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"patterns": &bintree{nil, map[string]*bintree{
		"audit": &bintree{patternsAudit, map[string]*bintree{}},
		"base": &bintree{patternsBase, map[string]*bintree{}},
		"firewall": &bintree{patternsFirewall, map[string]*bintree{}},
		"ha-proxy": &bintree{patternsHaProxy, map[string]*bintree{}},
		"java": &bintree{patternsJava, map[string]*bintree{}},
		"linux-syslog": &bintree{patternsLinuxSyslog, map[string]*bintree{}},
		"nginx_access": &bintree{patternsNginx_access, map[string]*bintree{}},
		"redis": &bintree{patternsRedis, map[string]*bintree{}},
		"ruby": &bintree{patternsRuby, map[string]*bintree{}},
		"secure": &bintree{patternsSecure, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

